import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Joystick;
import com.ctre.phoenix.motorcontrol.ControlMode;

import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;

public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  //private final SendableChooser<String> m_chooser = new SendableChooser<>();

  //joystick port setup
  private static final int kJoystickPort = 0;

  //joystick(s)
  private Joystick m_joystick = new Joystick(kJoystickPort);
  double climbJoy = 0;

  int leftEncoder = 0;

  //motor ports setup
  private static final int climbMotorPort = 7;

  private TalonSRX climbMotor = new TalonSRX(climbMotorPort);

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
    climbMotor.set(ControlMode.PercentOutput, 0);
    climbMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder);
    zeroSensors();
    getSensor();
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
    getSensor();
    climbJoy = m_joystick.getRawAxis(5);
    

    if (climbJoy >= 0.05 || climbJoy <= -0.05) {
      climbMotor.set(ControlMode.PercentOutput, climbJoy*0.8);
    }
    else {
      climbMotor.set(ControlMode.PercentOutput, 0);
    }

    if (m_joystick.getRawButton(1)) {
      zeroSensors();
    }
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the   dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    //m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    //System.out.println("Auto selected: " + m_autoSelected);
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {

  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }

  void zeroSensors() {
    climbMotor.setSelectedSensorPosition(0);
  }

  public void getSensor() {
    leftEncoder = climbMotor.getSelectedSensorPosition(1);
    System.out.println(leftEncoder);
  }

//end
}
